extends layout

block content
    script(src="create.js")
    main
        .container
            h2= title
            .divider
            .row
                .col.s6
                    input(type="text" id="myInput" onkeyup="searchSteps()" placeholder="Search for steps...")
            .row
                .col.s6
                    ul(id="step-list" class="collection")
                .col.s6
                    ul(id="selected-step-list" class="collection" style="touch-action:none")
        .nav
            ul(id="slide-out" class="side-nav fixed")
                ul(class="collapsible collapsible-accordion")
                    li(class="bold")
                        a(class='collapsible-header waves-effect waves-teal active') Select a Level
                            i(class='material-icons') arrow_drop_down
                        div(class='collapsible-body')
                            ul(id='level-dropdown')

                                //a(base href="/create?level=" + level) #{level}
                    li(class="bold")
                        a(class='collapsible-header waves-effect waves-teal') Select a Style
                            i(class='material-icons') arrow_drop_down
                        div(class='collapsible-body')
                            ul(id='categories-dropdown' class='collapsible collapsible-accordion')
                                //each category, i in Object.keys(categories)
                                    li(value=category class="bold category-dropdown" id=category)
                                        //a(class='collapsible-header waves-effect waves-red') #{category}
                                            i(class='material-icons') arrow_drop_down
                                        //div(class='collapsible-body')
                                            .row
                                                ul(id='dances-dropdown')
                                                    each dance, i in (categories[category])
                                                        li(value=dance class="dance-button" id=dance)
                                                            a() #{dance}
                                                            //a(href= "?category=" + category + "&dance=" + dance) #{dance}
    script.

        // Initialize collapse button
        $('.button-collapse').sideNav({
                menuWidth: 300, // Default is 240
                closeOnClick: true // Closes side-nav on <a> clicks, useful for Angular/Meteor
            }
        );
        $('.collapsible').collapsible();


        var selectedDance = {level: "Bronze", category: "Latin", dance: "Cha-Cha"}
        loadDanceCategories();

        var list1 = document.getElementById("step-list");
        var list2 = document.getElementById("selected-step-list")
        var loadedStepsSortable = new Sortable(list1, {
            group: {name: "drag-list", pull: 'clone', put: true},
            animation: 75,
            onAdd: function (evt) {
                this.el.removeChild(evt.item);
            },
            sort: false
        })
        var routineSortable = new Sortable(list2, {
            group: {name: "drag-list", pull: true, put: true},
            animation: 75,
            filter: ".js-remove, .js-edit",
            onFilter: function (evt) {
                var item = evt.item,
                    ctrl = evt.target;

                if (Sortable.utils.is(ctrl, ".js-remove")) {  // Click on remove button
                    item.parentNode.removeChild(item); // remove sortable item
                }
                else if (Sortable.utils.is(ctrl, ".js-edit")) {  // Click on edit link
                    // ...
                }
            },
            store: {
                /**
                 * Get the order of elements. Called once during initialization.
                 * @param   {Sortable}  sortable
                 * @returns {Array}
                 */
                get: function (sortable) {
                    var order = localStorage.getItem(sortable.options.group.name);
                    return order ? order.split('|') : [];
                },

                /**
                 * Save the order of elements. Called onEnd (when the item is dropped).
                 * @param {Sortable}  sortable
                 */
                set: function (sortable) {
                    var order = sortable.toArray();
                    localStorage.setItem(sortable.options.group.name, order.join('|'));
                }
            }
        });

        function searchSteps() {
            // Declare variables
            var input, filter, ul, li, a, i;
            input = document.getElementById('myInput');
            filter = input.value.toUpperCase();
            ul = document.getElementById("step-list");
            li = ul.getElementsByTagName('li');
            // Loop through all list items, and hide those who don't match the search query
            for (i = 0; i < li.length; i++) {
                if (li[i].innerHTML.toUpperCase().indexOf(filter) > -1) {
                    li[i].style.display = "";
                } else {
                    li[i].style.display = "none";
                }
            }
        }


    style.

        ul li.active.dance-button { /* Style for the pink button on sidebar */
            background-color: #ee6e73 !important;
        }

        ul#selected-step-list {
            min-height: 50vh;
        }
        ul#step-list {
            min-height: 50vh;
        }

        header, main, footer {
            padding-left: 300px;
        }

        @media only screen and (max-width: 992px) {
            header, main, footer {
                padding-left: 0;
            }
        }